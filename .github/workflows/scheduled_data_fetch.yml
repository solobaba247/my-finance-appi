# This is the full content for the file: .github/workflows/scheduled_data_fetch.yml

name: Scheduled Data Fetch

# This section defines the TRIGGERS that will run this workflow.
on:
  # This line allows you to run the workflow manually from the "Actions" tab.
  # It's essential for testing.
  workflow_dispatch:

  # This line runs the workflow on a schedule using a "cron" expression.
  # '0 * * * *' means "run at minute 0 of every hour".
  schedule:
    - cron: '0 * * * *'

# This section defines the actual work to be done.
jobs:
  # We have one job named "build-and-commit".
  build-and-commit:
    # This specifies the job will run on a fresh, virtual Linux machine.
    runs-on: ubuntu-latest

    # This lists the sequence of steps the job will execute.
    steps:
      # Step 1: Download your repository's code onto the virtual machine.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Install the Python programming language on the machine.
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # Step 3: Install the 'yfinance' library which your script needs.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install yfinance

      # Step 4: Execute your Python script to fetch the data.
      # This will create or update the 'live_data.json' file.
      - name: Run data fetch script
        run: python update_data.py

      # Step 5: Commit the 'live_data.json' file back to your repository.
      - name: Commit and push changes
        run: |
          # Configure Git with a generic user identity for the commit.
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # This command checks if the file has actually changed.
          # If it hasn't, the script will skip the commit and push.
          if ! git diff --quiet live_data.json; then
            git add live_data.json
            git commit -m "Update live stock data" -m "Data updated at $(date -u)"
            git push
          else
            echo "No changes to commit."
          fi
        env:
          # This gives the action permission to push by using the secure token
          # you stored in your repository's secrets.
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
